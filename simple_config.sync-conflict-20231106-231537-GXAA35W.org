#+options: ^:nil
#+title: simple.org
#+options: \n:t
#+author: yenao
#+OPTIONS: H:3 toc:t
#+OPTIONS: toc:t

** config
*** init.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq gc-cons-threshold (* 50 1000 1000))
  ;; Portion of heap used for allocation.  Defaults to 0.1.
  (setq gc-cons-percentage 0.6)

  ;; 基本配置
  (load-file "~/.emacs.d/basic_config.el") ;; 我的基本的配置
  (load-file "~/.emacs.d/use-package.el") ;; 用于安装或者配置插件

  ;; 配置启动欢迎界面
  ;; (when (display-graphic-p)
  ;;   (load-file "~/.emacs.d/dashboard.el"))
  (when (version<= "26.1" emacs-version)
	(load-file "~/.emacs.d/dashboard.el")
	)
  (when (version<= "25.1" emacs-version)
	(load-file "~/.emacs.d/projectile.el"))

  ;; 主题配置
  ;; (load-file "~/.emacs.d/doom-themes.el") ;; 主题 
  ;; (load-file "~/.emacs.d/dracula-theme.el") ;; 主题
  (load-file "~/.emacs.d/spacemacs-theme.el") ;; 主题

  (load-file "~/.emacs.d/mwim.el") ;; 优化 C-a 与 C-e
  (load-file "~/.emacs.d/amx.el") ;; 短暂记录命令历史
  (when (version<= "24.5.1" emacs-version)
	(load-file "~/.emacs.d/which-key.el") ;; 快捷键提示	  
	)

  (when (version<= "25.1" emacs-version)
	(load-file "~/.emacs.d/company.el") ;; 补全文本用  
	)
  (load-file "~/.emacs.d/avy.el") ;; 强大插件，可以脱离鼠标使用
  (load-file "~/.emacs.d/tiny.el")
  ;; (load-file "~/.emacs.d/treemacs.el")
  (when (version<= "24.5.1" emacs-version)
	(load-file "~/.emacs.d/cnfonts.el") ;; 用于缩放字体		
	)
  (when (version<= "24.5.1" emacs-version)
	(load-file "~/.emacs.d/highlight-symbol.el") ;; <F10> 打开符号高亮	
	)

  (load-file "~/.emacs.d/rainbow-delimiters.el") ;; 标记多级代码块
  (when (version<= "24.5.1" emacs-version)
	(load-file "~/.emacs.d/window-numbering.el") ;; 切换窗口用
	)

  (when (version<= "25.3" emacs-version)
	(load-file "~/.emacs.d/keycast.el") ;; 用于显示在 emacs中操作的按键，可以插件开启这个插件的模式，自动启动会于minibuffer的行列显示冲突
	)

  ;; (load-file "~/.emacs.d/good-scroll.el") ;; 优化页面滚动，但是我没感觉出效果
  ;; (load-file "~/.emacs.d/undo-tree.el") ;; 优化 undo 和 redo,不太习惯,可能是因为用得少或者不够熟悉该插件的使用方法

  ;; 配置代码块
  (load-file "~/.emacs.d/g-config.el") ;; 配置插件的代码块
  (load-file "~/.emacs.d/auto-mode-alist.el")
  (load-file "~/.emacs.d/g-org-insert-note-header.el") ;; 插件org文件头
  (load-file "~/.emacs.d/g-org-emacs-lisp-code-block.el") ;; 插入一般的代码块
  (load-file "~/.emacs.d/g-org-c-code-block.el") ;; 插入c代码块
  (load-file "~/.emacs.d/g-org-bash-code-block.el") ;; 插入bash代码块
  (load-file "~/.emacs.d/g-org-html-code-block.el") ;; 插入html代码块
  (load-file "~/.emacs.d/report.el") ;; 插件特定代码块模板用
  (load-file "~/.emacs.d/insert-timestamp.el") ;; 插入时间戳
  (load-file "~/.emacs.d/show-current-time.el") ;; 显示时间戳
  (load-file "~/.emacs.d/create-dated-diary.el") ;; 用于写日记
  (load-file "~/.emacs.d/web-mode.el") ;; web-mode 提供了很好的wen配件（HTML、JavaScript、CSS、PHP等）的代码缩进、折叠和高亮等出色的功能

  ;; 文本编辑插件
  (when (version<= "27.1" emacs-version)
	(load-file "~/.emacs.d/markdown.el") ;; 支持 markdown 模式编写文本  
	)

  (when (version<= "25.1" emacs-version)
	(load-file "~/.emacs.d/easy-hugo.el"))
  (when (version<= "26.1" emacs-version)
	(load-file "~/.emacs.d/ox-pandoc.el")
	)
  (when (version<= "26.3" emacs-version)
	(load-file "~/.emacs.d/ox-hugo.el") ;; 在org文件中执行 C-c C-e 导出文件时可以用于导出 markdown 文本	
	)

  ;; GTD任务管理配置
  (load-file "~/.emacs.d/GTD.el") ;; 用于GTD，还可以再完善，由于目前用的不多，没有过多完善

  ;; 配置日历与日记
  (load-file "~/.emacs.d/display_time.el")
  (load-file "~/.emacs.d/display-calendar.el")
  (load-file "~/.emacs.d/diary.el")

  ;; 配置eww浏览器使用习惯
  (load-file "~/.emacs.d/eww.el")

  ;; RSS阅读插件
  ;; (load-file "~/.emacs.d/newsticker.el") ;; 用于rss阅读，emacs自带
  ;; (load-file "~/.emacs.d/elfeed.el")

  ;; 一个搜索工具，使用外部浏览器
  ;; (load-file "~/.emacs.d/google-this.el") ;; 在minibuffer输入要搜索内容然后跳转到浏览器进行搜索

  ;; (load-file "~/.emacs.d/ace-window.el") ;; 切换窗口用，感觉没有window-numbering好用
  ;; (load-file "~/.emacs.d/magit.el") ;; emacs的 git 工具
  ;; (load-file "~/.emacs.d/yasnippet.el") ;; 可以配置程序模板，不熟练

										 ;;; 疑难杂症区
  ;; 插件管理器
  ;; (load-file "~/.emacs.d/el-get.el")

  ;; 配置笔记相关插件
  ;; (load-file "~/.emacs.d/Msys2.el")
  ;; (load-file "~/.emacs.d/pdf-tools.el")
  ;; (load-file "~/.emacs.d/org-noter.el")
  ;; (load-file "~/.emacs.d/org-roam.el")
  ;; (load-file "~/.emacs.d/org-roam-ui.el")
  ;; (load-file "~/.emacs.d/deft.el") ;; 笔记管理工具，不熟悉

  ;; (load-file "~/.emacs.d/graphviz-dot-mode.el")

  ;; 垃圾回收值
  ;; (load-file "~/.emacs.d/gc-tail.el")
  ;; 无差别对所有文件以只读模式打开
  (defun read-only-setup () 
	(read-only-mode)
	)
  (add-hook 'find-file-hook #'read-only-setup)
#+end_src

*** basic_config
#+begin_src emacs-lisp :tangle ~/.emacs.d/basic_config.el
  (setq inhibit-startup-message 1) ;; 禁止Emacs显示启动画面
  (fset 'display-startup-echo-area-message 'ignore) ;; 禁止Echo Area显示For information about GNU Emacs and the GNU system,type C-h C-a

  (when tool-bar-mode
	(tool-bar-mode -1)) ;; 在这个代码片段中，我们首先使用tool-bar-mode函数来检查工具栏的状态。如果工具栏处于打开状态，该函数返回非nil值，表示工具栏被启用。然后，我们使用(tool-bar-mode -1)将工具栏关闭。
  ;; (if tool-bar-mode
  ;; 	(tool-bar-mode -1)) ;; 在这个代码片段中，我们首先使用tool-bar-mode函数来检查工具栏的状态。如果工具栏处于打开状态，该函数返回非nil值，表示工具栏被启用。然后，我们使用(tool-bar-mode -1)将工具栏关闭。

  ;; (if menu-bar-mode
  ;; 	(menu-bar-mode -1))

  ;; (global-set-key (kbd "C-SPC") 'nil)
  ;; ;;取消control+space键设为mark
  (global-set-key (kbd "C-SPC") 'set-mark-command)
  ;;取消control+space键设为mark

  ;; (add-to-list 'default-frame-alist '(foreground-color . "#FFFFFF")) ;; 我最初的主题设定
  ;; (add-to-list 'default-frame-alist '(background-color . "#000000"))

  ;; (global-linum-mode t)

  ;; (if (string-match-p "28\.2" (emacs-version))
  ;; 	 (progn
  ;; 	   (global-linum-mode t)
  ;; 	   )
  ;; 	 )

  (when (version<= "29.1" emacs-version)
	;; 如果当前运行的是 Emacs 29.1 或更高版本，则执行以下代码：
	(message "global-display-line-numbers-mode")
	(global-display-line-numbers-mode t))

  (when (version<= emacs-version "28.2")
	;; 如果当前运行的是 Emacs 28.2 或更低版本，则执行以下代码：
	(message "global-linum-mode")
	(global-linum-mode t))

  (when (version<= "28.2" emacs-version)
	;; 如果当前运行的是 Emacs 28.2 或更高版本，则执行以下代码：
	(message "save-place-mode")
	(save-place-mode t))

  (column-number-mode t)

  (xterm-mouse-mode t)

  (setq visible-bell t)
  ;;关闭烦人的出错时的提示声

  (fset 'yes-or-no-p 'y-or-n-p)

  (recentf-mode t)

  ;; (save-place-mode t)

  (setq-default indent-tabs-mode t)
  (setq-default tab-width 4)
  (setq c-default-style "linux")
  (setq c-basic-offset 4)

  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))

  (defun reload-emacs-config ()
	(interactive)
	(load-file "~/.emacs.d/init.el"))
  (global-set-key (kbd "C-c C-SPC") 'reload-emacs-config)

  (defun close-current-window ()
	(interactive)
	(delete-window)
	)
  (global-set-key (kbd "C-c z") 'close-current-window)

  (global-set-key (kbd "C-M-z") 'indent-region)

  (global-set-key (kbd "M-j") nil)

  (global-set-key (kbd "<F10>") nil)

  (setq kill-ring-max 200)
  ;;设置粘贴缓冲条目数量.用一个很大的kill ring(最多的记录个数). 这样防止我不小心删掉重要的东西

  (setq enable-recursive-minibuffers t)
  ;;可以递归的使用 minibuffer

  (setq scroll-margin 0 scroll-conservatively 10000)
  ;;防止页面滚动时跳动， scroll-margin 3 可以在靠近屏幕边沿3行时就开始滚动，可以很好的看到上下文。

  ;; (setq-default auto-fill-function 'do-auto-fill)
  ;; ;; Autofill in all modes;;
  ;; (setq default-fill-column 120)
  ;; ;;把 fill-column 设为 60. 这样的文字更好读

  ;; (setq default-major-mode 'text-mode)
  ;; (add-hook 'text-mode-hook 'turn-on-auto-fill)
  ;;设置缺省主模式是text，,并进入auto-fill次模式.而不是基本模式fundamental-mode

  (mouse-avoidance-mode 'animate)
  ;;光标靠近鼠标指针时，让鼠标指针自动让开，别挡住视线。

  ;; (setq frame-title-format "emacs@%b")
  (setq frame-title-format "%b")
  ;;在标题栏显示buffer的名字，而不是 emacs@wangyin.com 这样没用的提示。

  (setq uniquify-buffer-name-style 'forward) ;;好像没起作用
  ;; 当有两个文件名相同的缓冲时，使用前缀的目录名做 buffer 名字，不用原来的foobar 形式

  (add-hook 'comint-output-filter-functions
			'comint-watch-for-password-prompt)
  ;;当你在shell、telnet、w3m等模式下时，必然碰到过要输入密码的情况,此时加密显出你的密码

  ;; (setq version-control t);;启用版本控制，即可以备份多次
  ;; (setq kept-old-versions 2);;备份最原始的版本两次，及第一次编辑前的文档，和第二次编辑前的文档
  ;; (setq kept-new-versions 1);;备份最新的版本1次，理解同上
  ;; (setq delete-old-versions t);;删掉不属于以上3中版本的版本
  ;; (setq backup-directory-alist '(("." . "~/backups")));;设置备份文件的路径
  ;; (setq backup-by-copying t);;备份设置方法，直接拷贝
  ;; Emacs 中，改变文件时，默认都会产生备份文件(以 ~ 结尾的文件)。可以完全去掉; (并不可取)，也可以制定备份的方式。这里采用的是，把所有的文件备份都放在一个固定的地方("~/backups")。对于每个备份文件，保留最原始的两个版本和最新的1个版本。并且备份的时候，备份文件是复本，而不是原件。

  ;; (setq make-backup-files nil)
  ;; ;; 设定不产生备份文件

  ;; ;;(setq auto-save-mode nil)
  ;; ;;自动保存模式

  ;; (setq-default make-backup-files nil)
  ;; ;; 不生成临时文件

  ;; ;;允许emacs和外部其他程序的粘贴
  ;; (setq x-select-enable-clipboard t)

  (setq mouse-yank-at-point t)
  ;;使用鼠标中键可以粘贴
  ;;不要在鼠标点击的那个地方插入剪贴板内容。我不喜欢那样，经常把我的文档搞的一团糟。我觉得先用光标定位，然后鼠标中键点击要好的多。不管你的光标在文档的那个位置，或是在 minibuffer，鼠标中键一点击，X selection 的内容就被插入到那个位置。

  (setq user-full-name "yenao")
  (setq user-mail-address "hexgio@outlook.com")
  ;;设置有用的个人信息,这在很多地方有用。

  ;; (setq require-final-newline t)
  ;; ;; 自动的在文件末增加一新行

  (setq-default transient-mark-mode t)
  ;; 高亮显示选中区域

  (setq track-eol t)
  ;; 当光标在行尾上下移动的时候，始终保持在行尾。

  ;; (setq Man-notify-method 'pushy)
  ;; ;; 当浏览 man page 时，直接跳转到 man buffer。

  ;;(setq next-line-add-newlines nil)
  ;;Emacs 21 中已经是缺省设置。按 C-n 或向下键时不添加新行。

  ;; (setq sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
  ;; (setq sentence-end-double-space nil)
  ;; (setq sentence-end-double-space t)
  ;;设置 sentence-end 可以识别中文标点。不用在 fill 时在句号后插入两个空格。

  ;; (if (display-graphic-p)
  ;; 	(progn
  ;; 	  ;; GUI环境下的配置
  ;; 	  (load "~/.emacs.d/gui-config.el"))
  ;;   (progn
  ;; 	;; 非GUI环境下的配置
  ;; 	(load "~/.emacs.d/non-gui-config.el")))

#+end_src

*** use-package.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/use-package.el
  ;; 初始化包管理器
  (require 'package)
  (package-initialize)

  ;; 设置软件包源
  (setq package-archives
		'(
		  ("GNU ELPA"     . "https://elpa.gnu.org/packages/")
		  ("MELPA Stable" . "https://stable.melpa.org/packages/")
		  ("melpa" . "https://melpa.org/packages/")
		  )
		)
  ;; 安装 use-package（如果还未安装）
  (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

  ;; 加载并自动安装软件包
  (eval-when-compile
	(require 'use-package))
  (require 'bind-key)
  ;; 设置 use-package 的一些常用选项
  (setq use-package-always-ensure t   ; 自动安装软件包
		use-package-verbose t        ; 在 *Messages* 缓冲区中详细显示加载信息
		use-package-compute-statistics t) ; 收集并显示 use-package 使用的时间信息

  ;; Your use-package package configurations start here...

#+end_src

*** dashboard
#+begin_src emacs-lisp :tangle ~/.emacs.d/dashboard.el
  (use-package dashboard
	:ensure t
	:config
	;; (setq dashboard-banner-logo-title "Welcome to Emacs!") ;; 个性签名，随读者喜好设置
	;; (setq dashboard-projects-backend 'projectile) ;; 读者可以暂时注释掉这一行，等安装了 projectile 后再使用
	(setq dashboard-startup-banner 'official) ;; 也可以自定义图片
	(setq dashboard-items '((recents  . 5)   ;; 显示多少个最近文件
							(bookmarks . 5)  ;; 显示多少个最近书签
							(projects . 10))) ;; 显示多少个最近项目
	(dashboard-setup-startup-hook))
#+end_src

*** projectile
#+begin_src emacs-lisp :tangle ~/.emacs.d/projectile.el
  (use-package projectile
	:ensure t)
#+end_src
*** doom-themes
#+begin_src emacs-lisp :tangle ~/.emacs.d/doom-themes.el
  (use-package doom-themes
	:ensure t
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold nil    ; if nil, bold is universally disabled
		  doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-monokai-octagon t)
	(doom-themes-treemacs-config))
#+end_src

*** dracula-theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/dracula-theme.el
  (use-package dracula-theme
	:ensure t
	:config
	(load-theme 'dracula t)
	)
#+end_src

*** spacemacs-theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/spacemacs-theme.el
  (use-package spacemacs-theme
	:ensure t
	:config
	(load-theme 'spacemacs-dark t)  ; Dark theme
	;; 或者
	;; (load-theme 'spacemacs-light t) ; Light theme
	)
#+end_src

*** g-config
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-config.el
  (defun g-config ()
	(interactive)
	(insert "*** \n#+begin_src emacs-lisp :tangle ~/.emacs.d/\n\n#+end_src")
	)
#+end_src

*** g-org-insert-note-header
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-org-insert-note-header.el
  (defun g-org-insert-note-header () ;;; 定义一个名为g-org-insert-note-header ()的函数
	(interactive) ;;; 函数的一个特殊声明，表示函数可以被用户调用
	(insert "#+options: ^:nil\n#+title: \n#+options: \\n:t\n#+author: yenao\n#+OPTIONS: H:10 toc:t\n")) ;;; insert函数用于在当前 光标位置插入指定的文本内容，当你调用这个函数时，它会在当前光标位置插入文本#+options: ^:nil、#+title:  和#+author: yenao
  ;; #+LANGUAGE: zh-CN ;; zh-CN或者en
#+end_src

*** g-org-emacs-lisp-code-block
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-org-emacs-lisp-code-block.el
  (defun g-org-emacs-lisp-code-block ()
	(interactive)
	(insert "#+begin_src emacs-lisp :tangle no\n\n#+end_src")
	)
#+end_src

*** g-org-c-code-block
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-org-c-code-block.el
  (defun g-org-c-code-block ()
	(interactive)
	(insert "#+begin_src c :tangle no\n\n#+end_src")
	)
#+end_src

*** g-org-bash-code-block
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-org-bash-code-block.el
  (defun g-org-bash-code-block ()
	(interactive)
	(insert "#+begin_src bash :tangle no\n\n#+end_src")
	)
#+end_src

*** g-org-html-code-block
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-org-html-code-block.el
  (defun g-org-html-code-block ()
	(interactive)
	(insert "#+begin_src html :tangle no\n\n#+end_src")
	)
#+end_src

*** report
#+begin_src emacs-lisp :tangle ~/.emacs.d/report.el
  (defun add-code-block ()
	"在当前位置添加一个代码块，并以时间作为块名进行命名"
	(interactive)
	(let* ((time (format-time-string "%Y-%m-%d"))  ; 获取当前时间
		   (clean-time (replace-regexp-in-string "[-:]" "" time))  ; 去除时间中的破折号和冒号
		   (block-name (concat clean-time))  ; 构建代码块名
		   (code-block (format
						"*** %s
  ,#+BEGIN_SRC emacs-lisp :tangle %s.txt
  %s: name\n1、
  ,#+END_SRC"
						block-name clean-time block-name)))
	  (insert code-block)))  ; 在当前位置插入代码块

  ;; 设置快捷键 C-c b 绑定到 add-code-block 函数
  (global-set-key (kbd "C-c SPC r") 'add-code-block)

  ;; 为什么%s会被替换为时间戳而不是其他内容被替换为时间戳，原理是什么
  ;; 	这是因为在 Emacs Lisp 中，`format` 函数的工作方式类似于 C 语言中的 `printf` 函数。`format` 函数接受一个格式字符串和一系列参数，然后根据格式字符串中的格式指定符（如 `%s`、`%d` 等）将后续的参数插入到格式字符串中。

  ;;   在你的代码中，`format` 函数的格式字符串是：

  ;;   ```lisp
  ;;   "*** %s
  ;;   #+BEGIN_SRC emacs-lisp :tangle %s.txt
  ;;   %s: name\n1、
  ;;   #+END_SRC"
  ;;   ```

  ;;   这个字符串中有三个 `%s`，所以 `format` 函数需要三个额外的参数。在你的代码中，这三个参数都是 `block-name`，即你处理过的时间戳。

  ;;   所以，当 `format` 函数运行时，它会依次取出 `block-name`，并将其插入到格式字符串中的 `%s` 的位置。这就是为什么 `%s` 会被替换为时间戳的原理。

  ;;   如果你希望将不同的内容插入到格式字符串中，你只需提供不同的参数即可。例如：

  ;;   ```lisp
  ;;   (format "Hello, %s! Today is %s." "Alice" "Monday")
  ;;   ```

  ;;   这段代码会返回字符串 "Hello, Alice! Today is Monday."。
  ;; ******************************************************************************
  ;; 这句有什么用：(block-name (concat clean-time))  ; 构建代码块名
  ;;   这一句 `(block-name (concat clean-time))` 的作用是创建一个新的变量 `block-name`，并将其设置为 `clean-time` 的值。

  ;; 在这个上下文中，`clean-time` 是一个已经去除了破折号和冒号的时间字符串。`concat` 函数通常用于连接多个字符串，但在这里，它只有一个参数 `clean-time`，所以它实际上只是返回 `clean-time` 的值。

  ;; 因此，这一句的效果就是创建了一个新的变量 `block-name`，并将其设置为与 `clean-time` 相同的值。后面的代码中使用 `block-name` 作为代码块的名字。

  ;; 如果你的代码中没有需要使用不同的名称来表示清理过的时间戳，那么这一行代码实际上是不必要的，你可以直接使用 `clean-time`。但是，如果你打算在后续的代码中修改 `block-name` 或 `clean-time` 的值，那么这一行代码就很有用了，因为它确保了 `block-name` 和 `clean-time` 是两个独立的变量，修改一个不会影响另一个。
#+end_src

*** insert-timestamp
#+begin_src emacs-lisp :tangle ~/.emacs.d/insert-timestamp.el
  (defun insert-timestamp ()
	(interactive)
	(insert (format-time-string "%Y%m%d%H%M%S")))

  (global-set-key (kbd "C-c t") 'insert-timestamp)
#+end_src
*** show-current-time
#+begin_src emacs-lisp :tangle ~/.emacs.d/show-current-time.el
(defun show-current-time ()
  (interactive)
  (let ((current-time (format-time-string "%Y%m%d%H%M%S")))
    (message "%s" current-time)))

(global-set-key (kbd "C-c s") 'show-current-time)  ; 绑定到快捷键 C-c s
#+end_src
*** create-dated-diary
#+begin_src emacs-lisp :tangle ~/.emacs.d/create-dated-diary.el
  (defun create-dated-diary ()
	(interactive)
	(let* ((current-date-time (format-time-string "%Y%m%d%H%M%S"))
		   (diary-filename (concat "~/diary/diary_" current-date-time ".org")))
	  (find-file diary-filename)))

  (global-set-key (kbd "C-c d") 'create-dated-diary)

#+end_src
*** web-mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/web-mode.el
  (use-package web-mode
	:ensure t
	)
#+end_src

*** ace-window
#+begin_src emacs-lisp :tangle ~/.emacs.d/ace-window.el
  (use-package ace-window
	:ensure t
	:defer 3
	:bind (("C-x o" . 'ace-window)))
#+end_src

*** GTD
#+begin_src emacs-lisp :tangle ~/.emacs.d/GTD.el
  ;; 尝试配置GTD
  (unless (file-exists-p "~/.emacs.d/OneDrive")
	(make-directory "~/.emacs.d/OneDrive")
	);; 检测OneDrive目录是否存在，如果不存在就创建这个目录
  (unless (file-exists-p "~/.emacs.d/OneDrive/org")
	(make-directory "~/.emacs.d/OneDrive/org")
	);; 检测org目录是否存在，如果不存在就创建这个目录
  (let ((filename "~/.emacs.d/my-agenda.el")) ;; 如果my-agenda.el文件不存在，就创建这个文件，如果需要往该文件内写入内容，将该段该中insert的注释取消即可
	(unless (file-exists-p filename)
	  (with-temp-file filename
		;; (insert "这是文件内容") ;; 写入文件内容
		)))
  (let ((filename "~/.emacs.d/OneDrive/org/todo.org")) ;; 如果todo.org文件不存在，就创建这个文件，如果需要往该文件内写入内容，将该段该中insert的注释取消即可
	(unless (file-exists-p filename)
	  (with-temp-file filename
		;; (insert "这是文件内容") ;; 写入文件内容
		)))

  (load-file "~/.emacs.d/my-agenda.el") ;; 加载my-agenda.el配置文件
  (setq org-agenda-files '("~/.emacs.d/OneDrive/org")) ;; 指定data存放目录
  (setq org-default-notes-file "~/.emacs.d/OneDrive/org/todo.org") ;; 配置好data目录后，再配置具体要将信息写于哪个文件，可以配置多个文件，出于简化，这里将所有的agenda todo写入~/Onedrive/org/todo.org文件下
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (define-key global-map "\C-cr" 'remember)

  (setq org-todo-keywords '((sequence "TODO(t!)" "NEXT(n)" "WAITTING(w)" "SOMEDAY(s)" "|" "DONE(d@/!)" "ABORT(a@/!)")))
  (setq org-tag-alist '(("@office" . ?w) ("@home" . ?h) ("traffic" . ?t) ("computer" . ?c) ("nocomputer" . ?n) ("either" . ?e) ("immediately" . ?i) ("wait" . ?w) ("action" . ?a)))
#+end_src

*** easy-hugo
#+begin_src emacs-lisp :tangle ~/.emacs.d/easy-hugo.el
  (use-package easy-hugo
	:ensure t
	:defer 3
	)
#+end_src

*** ox-hugo
#+begin_src emacs-lisp :tangle ~/.emacs.d/ox-hugo.el
  (unless (file-exists-p "~/hugo/")
	(make-directory "~/hugo/")
	)
  (unless (file-exists-p "~/hugo/project/")
	(make-directory "~/hugo/project/")
	)
  (unless (file-exists-p "~/hugo/static/")
	(make-directory "~/hugo/static/")
	)
  (use-package ox-hugo
	:ensure t
	:defer 3
	:config
	(setq org-hugo-base-dir "~/hugo/project/")
	)
#+end_src

*** org-noter
#+begin_src emacs-lisp :tangle ~/.emacs.d/org-noter.el
  (use-package org-noter
	:ensure t
	:defer 3
	)
#+end_src

*** pdf-tools
#+begin_src emacs-lisp :tangle ~/.emacs.d/pdf-tools.el
  (use-package pdf-tools
	:ensure t
	:init
	(pdf-loader-install))
  (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))

  (defun pdf-view-kill-rmn-ring-save ()
	"Copy the region to the `kill-ring' after remove all newline characters."
	(interactive)
	(pdf-view-assert-active-region)
	(let* ((txt (replace-regexp-in-string "\n" " "
										  (car (pdf-view-active-region-text)))))
	  (pdf-view-deactivate-region)
	  (kill-new txt)))

  ;; (use-package pdf-view-mode
  ;;   :bind
  ;;   ("C-c C-w" . pdf-view-kill-rmn-ring-save))
#+end_src

*** org-roam
#+begin_src emacs-lisp :tangle ~/.emacs.d/org-roam.el
  (unless (file-exists-p "~/.emacs.d/roam")
	(make-directory "~/.emacs.d/roam")
	)
  (use-package org-roam
	:ensure t
	:after org
	:init
	(setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
	;; :config
	;; (org-roam-setup) ;; 该配置有问题， 尚不清楚原因

	:custom
	(org-roam-directory "~/.emacs.d/roam/") ; 设置 org-roam 目录
	:bind
	(("C-c n f" . org-roam-node-find)
	 (:map org-mode-map
		   (("C-c n i" . org-roam-node-insert)
			("C-c n o" . org-id-get-create)
			("C-c n t" . org-roam-tag-add)
			("C-c n a" . org-roam-alias-add)
			("C-c n l" . org-roam-buffer-toggle)))))
#+end_src

*** org-roam-ui
#+begin_src emacs-lisp :tangle ~/.emacs.d/org-roam-ui.el
  (use-package org-roam-ui
	:ensure t
	:after org-roam
	:config
	(setq org-roam-ui-port 9000
		  org-roam-ui-sync-theme t
		  org-roam-ui-follow t
		  org-roam-ui-update-on-save t
		  org-roam-ui-open-on-start nil))
#+end_src

*** deft
#+begin_src emacs-lisp :tangle ~/.emacs.d/deft.el
  (unless (file-exists-p "~/.emacs.d/roam")
	(make-directory "~/.emacs.d/roam")
	)  
  (use-package deft
	:ensure t
	:commands (deft)
	:custom
	(deft-directory "~/.emacs.d/roam")
	(deft-recursive t))
#+end_src

*** magit
#+begin_src emacs-lisp :tangle ~/.emacs.d/magit.el
  (use-package magit
	:ensure t
	:defer t
	)
#+end_src

*** yasnippet
#+begin_src emacs-lisp :tangle ~/.emacs.d/yasnippet.el
  ;; (defun move-file-to-folder (file folder)
  ;;   "Move FILE to FOLDER. If FOLDER does not exist, create it."
  ;;   (unless (file-exists-p folder)
  ;; 	(make-directory folder t))
  ;;   (let ((new-path (expand-file-name (file-name-nondirectory file) folder)))
  ;; 	(rename-file file new-path)
  ;; 	(message "Moved %s to %s" file new-path)
  ;; 	))

  ;; (move-file-to-folder "~/hugo" "~/snippets/org-mode/")

  ;; (unless (file-exists-p "~/snippets")
  ;;   (make-directory "~/snippets"))
  ;; (unless (file-exists-p "~/snippets/org-mode")
  ;;   (make-directory "~/snippets/org-mode"))

  ;; (unless (file-exists-p "~/snippets")
  ;;   (make-directory "~/snippets"))
  ;; (unless (file-exists-p "~/snippets/org-mode")
  ;;   (make-directory "~/snippets/org-mode"))
  ;; (defun move-file-to-folder (file folder)
  ;;   "Move FILE to FOLDER. If FOLDER does not exist, create it."
  ;;   (unless (file-exists-p folder)
  ;; 	(make-directory folder t))
  ;;   (let ((new-path (expand-file-name (file-name-nondirectory file) folder)))
  ;; 	(rename-file file new-path)
  ;; 	(message "Moved %s to %s" file new-path)
  ;; 	))

  ;; (move-file-if-not-exists "~/hugo" "~/snippets/org-mode/")
  ;; (move-file-to-folder "~/.emacs.d/hugo" "~/.emacs.d/snippets/org-mode/")

  ;; (defun move-file-if-not-exists (file folder)
  ;;   "Move FILE to FOLDER if FILE does not exist in the folder."
  ;;   (let ((new-path (expand-file-name (file-name-nondirectory file) folder)))
  ;; 	(unless (file-exists-p new-path)
  ;; 	  (rename-file file new-path)
  ;; 	  (message "Moved %s to %s" file new-path))))

  ;; (move-file-if-not-exists "~/hugo" "~/snippets/org-mode/")

  ;; (use-package yasnippet
  ;;   :ensure t
  ;;   :init (yas-global-mode t)
  ;;   :config
  ;;   (yas-reload-all)
  ;;   (add-hook 'prog-mode-hook #'yas-minor-mode)
  ;;   (add-hook 'org-mode-hook #'yas-minor-mode)
  ;;   ;; :bind ("C-c y" . yas-expand))

  (use-package yasnippet
  :ensure t
  :init (yas-global-mode 1)
  :config (yas-reload-all))

#+end_src

*** projectile
#+begin_src emacs-lisp :tangle ~/.emacs.d/projectile.el
  (use-package projectile
	:ensure t)
#+end_src

*** markdown
#+begin_src emacs-lisp :tangle ~/.emacs.d/markdown.el
  (use-package markdown-mode
	:ensure t
	:defer t
	:config
	;;markdown设置
	(autoload 'markdown-mode "markdown-mode"
	  "Major mode for editing Markdown files" t)
	(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
	(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
	(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
	)
#+end_src

*** ox-pandoc
#+begin_src emacs-lisp :tangle ~/.emacs.d/ox-pandoc.el
  (use-package ox-pandoc
	:ensure t
	:defer t
	)
#+end_src

*** newsticker
#+begin_src emacs-lisp :tangle ~/.emacs.d/newsticker.el
  (use-package newsticker
	:ensure nil
	:init
	(setq newsticker-retrieval-interval 0
		  newsticker-ticker-interval 0)
	:config
	(global-set-key (kbd "C-c n") 'newsticker-show-news)
	(setq newsticker-show-full-article-content t)
	(defun my/leader-keys ()
	  "on" '(my/newsticker-treeview-in-new-tab :wk "newsticker"))
	(defun my/newsticker-treeview-in-new-tab ()
	  (interactive)
	  (let (succ)
		(unwind-protect
			(progn
			  (tab-bar-new-tab)
			  (call-interactively #'newsticker-treeview)
			  (tab-bar-rename-tab "newsticker")
			  (setq succ t))
		  (unless succ
			(tab-bar-close-tab)))))

	(defun my/newsticker-treeview-quit-and-close-tab ()
	  (interactive)
	  (newsticker-treeview-quit)
	  (newsticker-stop)
	  (tab-close))

	(defun general-define-key ()
	  :keymaps 'newsticker-treeview-mode-map
	  :states 'normal
	  "q" 'my/newsticker-treeview-quit-and-close-tab)

	:custom
	(newsticker-url-list '(
						   ;; ("title" "URL" other options)
						   ("少数派" "https://sspai.com/feed")
						   ("Luckydesigner" "https://www.luckydesigner.space/feed")
						   ("极客部落" "https://g22z.com/feed")
						   ("国光" "https://www.sqlsec.com/atom.xml")
						   ("面向信仰的编程" "https://draveness.me/feed.xml")
						   ))
	(newsticker-retrieval-method 'extern)
	(newsticker-wget-name "curl")
	(newsticker-wget-arguments '("--disable" "--silent" "--location" "--proxy" "socks5://127.0.0.1:7890"))
	(newsticker-url-list-defaults nil)    ;remove default list (i.e. emacswiki)
	(newsticker-automatically-mark-items-as-old nil))
#+end_src

*** mwim
#+begin_src emacs-lisp :tangle ~/.emacs.d/mwim.el
  (use-package mwim
	:ensure t
	:defer 3
	:bind
	("C-a" . mwim-beginning-of-code-or-line)
	("C-e" . mwim-end-of-code-or-line))
#+end_src

*** amx
#+begin_src emacs-lisp :tangle ~/.emacs.d/amx.el
  (use-package amx
	:ensure t
	:defer 3
	:init (amx-mode))
#+end_src

*** which-key
#+begin_src emacs-lisp :tangle ~/.emacs.d/which-key.el
  (use-package which-key
	:ensure t
	:defer 1
	:init (which-key-mode))
#+end_src

*** company.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/company.el
  (use-package company
	:ensure t
	:defer 3
	:init (global-company-mode t)
	:config
	(setq company-minimum-prefix-length 1)
	(setq company-tooltip-align-annotations t)
	(setq company-idle-delay 0.0)
	(setq company-show-numbers t)
	(setq company-selection-wrap-around t)
	(setq company-transformers '(company-sort-by-occurrence)))
#+end_src

*** avy
#+begin_src emacs-lisp :tangle ~/.emacs.d/avy.el
  (use-package avy
	:ensure t
	:defer 3
	:bind
	(("M-j" . avy-goto-char-timer)))
#+end_src

*** tiny
#+begin_src emacs-lisp :tangle ~/.emacs.d/tiny.el
  (use-package tiny
	:ensure t
	:defer 3
	;; 可选绑定快捷键，笔者个人感觉不绑定快捷键也无妨
	:bind
	("C-;" . tiny-expand))
#+end_src

*** treemacs
#+begin_src emacs-lisp :tangle ~/.emacs.d/treemacs.el
  (use-package treemacs
	:ensure t
	:defer 3
	:config
	(treemacs-tag-follow-mode)
	:bind
	(:map global-map
		  ("M-0"       . treemacs-select-window)
		  ("C-x t 1"   . treemacs-delete-other-windows)
		  ("C-x t t"   . treemacs)
		  ("C-x t B"   . treemacs-bookmark)
		  ("C-x t C-t" . treemacs-find-file)
		  ("C-x t M-t" . treemacs-find-tag))
	(:map treemacs-mode-map
		  ("/" . treemacs-advanced-helpful-hydra)))

  (use-package treemacs-projectile
	:ensure t
	:after (treemacs projectile))

  (use-package lsp-treemacs
	:ensure t
	:after (treemacs lsp))
#+end_src

*** cnfonts
参考链接:
[[https://github.com/tumashu/cnfonts][cnfonts，A simple Chinese fonts config tool]]
[[https://blog.csdn.net/fareast_mzh/article/details/94720439][emacs 调整字体大小]]
#+begin_src emacs-lisp :tangle ~/.emacs.d/cnfonts.el
  (use-package cnfonts
	:ensure t
	:defer 3
	:init (cnfonts-mode t)
	:config
	(define-key cnfonts-mode-map (kbd "C--") #'cnfonts-decrease-fontsize)
	(define-key cnfonts-mode-map (kbd "C-=") #'cnfonts-increase-fontsize)
	)
#+end_src

*** highlight-symbol
#+begin_src emacs-lisp :tangle ~/.emacs.d/highlight-symbol.el
  (use-package highlight-symbol
	:ensure t
	:defer 3
	:init (highlight-symbol-mode)
	:bind ("<f10>" . highlight-symbol)) ;; 按下 F10 键就可高亮当前符号
#+end_src

*** rainbow-delimiters
#+begin_src emacs-lisp :tangle ~/.emacs.d/rainbow-delimiters.el
  (use-package rainbow-delimiters
	:ensure t
	:defer 3
	:hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** window-numbering
#+begin_src emacs-lisp :tangle ~/.emacs.d/window-numbering.el
  (use-package window-numbering
	:ensure t
	;; :defer 3
	:init (window-numbering-mode t)
	)
#+end_src

*** keycast
#+begin_src emacs-lisp :tangle ~/.emacs.d/keycast.el
  (use-package keycast
	:ensure t
	:defer t
	)
#+end_src

*** eww
#+begin_src emacs-lisp :tangle ~/.emacs.d/eww.el
  (use-package eww
	:ensure nil
	:defer 3
	:config
	;; (with-eval-after-load 'eww  
	;; 	(custom-set-variables  
	;; 	 '(eww-search-prefix "https://bing.com/search?q="))  
	;; 	)
	(custom-set-variables  
	 '(eww-search-prefix "https://bing.com/search?q="))

	(prefer-coding-system 'utf-8)
	(setq-default buffer-file-coding-system 'utf-8)
	(setq eww-use-external-webkit t)
	(setq-default eww-ems-internal-uses-webkit t)
	;; 如果想尝试用外部浏览器浏览网页的话可以考虑折腾下面的命令
	;; (setq browse-url-generic-program "浏览器命令")
	;; (setq browse-url-browser-function 'browse-url-generic)
	;; (setq browse-url-generic-program "firefox")
	;; (setq browse-url-browser-function 'browse-url-generic)

	;; (when (display-graphic-p)
	;; 	(setq eww-toggle-images t))
	)
#+end_src

*** display_time
#+begin_src emacs-lisp :tangle ~/.emacs.d/display_time.el
  (display-time-mode 1);;启用时间显示设置，在minibuffer上面的那个杠上
  (setq display-time-24hr-format t);;时间使用24小时制
  (setq display-time-day-and-date t);;时间显示包括日期和具体时间
  ;; (setq display-time-use-mail-icon t);;时间栏旁边启用邮件设置
  ;; (setq display-time-interval 10);;时间的变化频率，单位多少来着？
#+end_src

*** display-calendar
#+begin_src emacs-lisp :tangle ~/.emacs.d/display-calendar.el
  ;; 设置 calendar 的显示
  (setq calendar-remove-frame-by-deleting t)
  (setq calendar-week-start-day 1) ; 设置星期一为每周的第一天
  (setq mark-diary-entries-in-calendar t) ; 标记calendar上有diary的日期
  (setq mark-holidays-in-calendar nil) ; 为了突出有diary的日期，calendar上不标记节日
  (setq view-calendar-holidays-initially nil) ; 打开calendar的时候不显示一堆节日

  ;; 去掉不关心的节日，设定自己在意的节日，在 calendar 上用 h 显示节日
  (setq christian-holidays nil)
  (setq hebrew-holidays nil)
  (setq islamic-holidays nil)
  (setq solar-holidays nil)
  (setq general-holidays '((holiday-fixed 1 1 "元旦")
						   (holiday-fixed 2 14 "情人节")
						   (holiday-fixed 3 14 "白色情人节")
						   (holiday-fixed 4 1 "愚人节")
						   (holiday-fixed 5 1 "劳动节")
						   (holiday-float 5 0 2 "母亲节")
						   (holiday-fixed 6 1 "儿童节")
						   (holiday-float 6 0 3 "父亲节")
						   (holiday-fixed 7 1 "建党节")
						   (holiday-fixed 8 1 "建军节")
						   (holiday-fixed 9 10 "教师节")
						   (holiday-fixed 10 1 "国庆节")
						   (holiday-fixed 12 25 "圣诞节")))

  ;;Calendar模式支持各种方式来更改当前日期
  ;;（这里的“前”是指还没有到来的那一天，“后”是指已经过去的日子）
  ;; q 退出calendar模式
  ;; C-f 让当前日期向前一天
  ;; C-b 让当前日期向后一天
  ;; C-n 让当前日期向前一周
  ;; C-p 让当前日期向后一周
  ;; M-} 让当前日期向前一个月
  ;; M-{ 让当前日期向后一个月
  ;; C-x ] 让当前日期向前一年
  ;; C-x [ 让当前日期向后一年
  ;; C-a 移动到当前周的第一天
  ;; C-e 移动到当前周的最后一天
  ;; M-a 移动到当前月的第一天
  ;; M-e 多动到当前月的最后一天
  ;; M-< 移动到当前年的第一天
  ;; M-> 移动到当前年的最后一天

  ;;Calendar模式支持移动多种移动到特珠日期的方式
  ;; g d 移动到一个特别的日期
  ;; o 使某个特殊的月分作为中间的月分
  ;; . 移动到当天的日期
  ;; p d 显示某一天在一年中的位置，也显示本年度还有多少天。
  ;; C-c C-l 刷新Calendar窗口

  ;; Calendar支持生成LATEX代码。
  ;; t m 按月生成日历
  ;; t M 按月生成一个美化的日历
  ;; t d 按当天日期生成一个当天日历
  ;; t w 1 在一页上生成这个周的日历
  ;; t w 2 在两页上生成这个周的日历
  ;; t w 3 生成一个ISO-SYTLE风格的当前周日历
  ;; t w 4 生成一个从周一开始的当前周日历
  ;; t y 生成当前年的日历

  ;;EMACS Calendar支持配置节日：
  ;; h 显示当前的节日
  ;; x 定义当天为某个节日
  ;; u 取消当天已被定义的节日
  ;; e 显示所有这前后共三个月的节日。
  ;; M-x holiday 在另外的窗口的显示这前后三个月的节日。


  ;; 另外，还有一些特殊的，有意思的命令：
  ;; S 显示当天的日出日落时间(是大写的S)
  ;; p C 显示农历可以使用
  ;; g C 使用农历移动日期可以使用

  ;;-----------日历设置结束----------------
#+end_src

*** diary
#+begin_src emacs-lisp :tangle ~/.emacs.d/diary.el
  ;;-----------日记设置---------------------

  (unless (file-exists-p "~/diary/")
	(make-directory "~/diary/")
	)
  (let ((filename "~/diary/diary")) 
	(unless (file-exists-p filename)
	  (with-temp-file filename)))  
  (setq diary-file "~/diary/diary");; 默认的日记文件
  (setq diary-mail-addr "hexgio@outlook.com")
  (add-hook 'diary-hook 'appt-make-list)
  ;;当你创建了一个'~/diary'文件，你就可以使用calendar去查看里面的内容。你可以查看当天的事件，相关命令如下 ：
  ;; d 显示被选中的日期的所有事件
  ;; s 显示所有事件，包括过期的，未到期的等等

  ;; 创建一个事件的样例：
  ;; 02/11/1989
  ;; Bill B. visits Princeton today
  ;; 2pm Cognitive Studies Committee meeting
  ;; 2:30-5:30 Liz at Lawrenceville
  ;; 4:00pm Dentist appt
  ;; 7:30pm Dinner at George's
  ;; 8:00-10:00pm concert

  ;; 创建事件的命令：
  ;; i d 为当天日期添加一个事件
  ;; i w 为当天周创建一个周事件
  ;; i m 为当前月创建一个月事件
  ;; i y 为当前年创建一个年事件
  ;; i a 为当前日期创建一个周年纪念日
  ;; i c 创建一个循环的事件

  ;;----------日记设置结束-----------------
#+end_src

*** auto-mode-alist
#+begin_src emacs-lisp :tangle ~/.emacs.d/auto-mode-alist.el
  (setq auto-mode-alist
		;; 将文件模式和文件后缀关联起来
		(append '(("\\.py\\'" . python-mode)
				  ("\\.s?html?\\'" . web-mode)
				  ("\\.asp\\'" . html-helper-mode)
				  ("\\.phtml\\'" . html-helper-mode)
				  ("\\.css\\'" . css-mode))
				auto-mode-alist))
#+end_src

*** use-package_simple
#+begin_src emacs-lisp :tangle no
  (require 'package)
  (package-initialize)
  (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
  (eval-when-compile
	(require 'use-package))
  (require 'bind-key)
#+end_src

*** graphviz-dot-mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/graphviz-dot-mode.el
(use-package graphviz-dot-mode
  :ensure t
  :config
  (setq graphviz-dot-indent-width 4))

(use-package company-graphviz-dot)
#+end_src 
