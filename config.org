#+options: ^:nil
#+title: config
#+options: \n:t
#+author: yenao

* config
** init.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; 在~/.emacs.d/目录下编辑org文件，将代码块导出后再在org文件中通过load-file加载或者重启emacs，同时检查家目录下如果出现.emacs就将其删除
  ;; 如果不想加载哪个配置文件，可以将其注释掉
  ;; 以下几个插件有些问题，暂时没有配置好
  ;; (load-file "~/.emacs.d/gcmh.el") ;; 用于emacs内存垃圾回收
  ;; (load-file "~/.emacs.d/esup.el") ;; 待尝试用el-get安装
  (load-file "~/.emacs.d/gc-head.el")
  (load-file "~/.emacs.d/basic_config.el") ;; 我的基本的配置
  (load-file "~/.emacs.d/use-package.el") ;; 用于安装或者配置插件
  (load-file "~/.emacs.d/display_time.el")
  ;; (load-file "~/.emacs.d/el-get.el")
  ;; (load-file "~/.emacs.d/undo-tree.el") ;; 优化 undo 和 redo
  ;; (load-file "~/.emacs.d/doom-themes.el") ;; 主题 
  ;; (load-file "~/.emacs.d/dracula-theme.el") ;; 主题
  (load-file "~/.emacs.d/spacemacs-theme.el") ;; 主题  
  (load-file "~/.emacs.d/dashboard.el")
  (load-file "~/.emacs.d/mwim.el") ;; 优化 C-a 与 C-e
  (load-file "~/.emacs.d/amx.el") ;; 短暂记录命令历史
  (load-file "~/.emacs.d/which-key.el") ;; 快捷键提示
  (load-file "~/.emacs.d/company.el") ;; 补全文本用
  (load-file "~/.emacs.d/avy.el") ;; 强大插件，可以脱离鼠标使用
  (load-file "~/.emacs.d/tiny.el")  
  ;; (load-file "~/.emacs.d/treemacs.el")
  (load-file "~/.emacs.d/cnfonts.el") ;; 用于缩放字体
  (load-file "~/.emacs.d/highlight-symbol.el") ;; <F10> 打开符号高亮
  (load-file "~/.emacs.d/rainbow-delimiters.el") ;; 标记多级代码块
  (load-file "~/.emacs.d/g-config.el") ;; 插件插件配置代码块
  (load-file "~/.emacs.d/g-org-insert-note-header.el") ;; 插件org文件头
  (load-file "~/.emacs.d/g-org-code-block.el") ;; 插入一般的代码块
  (load-file "~/.emacs.d/report.el") ;; 插件特定代码块模板用
  (load-file "~/.emacs.d/markdown.el") ;; 支持 markdown 模式编写文本  
  (load-file "~/.emacs.d/easy-hugo.el")  
  (load-file "~/.emacs.d/window-numbering.el") ;; 切换窗口用
  (load-file "~/.emacs.d/keycast.el") ;; 用于显示在 emacs中操作的按键，可以插件开启这个插件的模式，自动启动会于minibuffer的行列显示冲突
  (load-file "~/.emacs.d/eww.el")
  ;; (load-file "~/.emacs.d/test_emacs_speed.el")
  ;; (load-file "~/.emacs.d/newsticker.el") ;; 用于rss阅读
  ;; (load-file "~/.emacs.d/google-this.el") ;; 在minibuffer输入要搜索内容然后跳转到浏览器进行搜索
  ;; (load-file "~/.emacs.d/good-scroll.el") ;; 优化页面滚动，但是我没感觉出效果
  ;; (load-file "~/.emacs.d/ace-window.el") ;; 切换窗口用
  (load-file "~/.emacs.d/GTD.el") ;; 用于GTD，还可以再完善，由于目前用的不多，没有过多完善
  ;; (load-file "~/.emacs.d/ox-hugo.el") ;; 在org文件中执行 C-c C-e 导出文件时可以用于导出 markdown 文本
  ;; (load-file "~/.emacs.d/ox-pandoc.el")
  ;; (load-file "~/.emacs.d/org-noter.el")
  ;; (load-file "~/.emacs.d/org-roam.el")
  ;; (load-file "~/.emacs.d/org-roam-ui.el")
  ;; (load-file "~/.emacs.d/deft.el") 
  ;; (load-file "~/.emacs.d/Msys2.el")
  ;; (load-file "~/.emacs.d/pdf-tools.el")
  ;; (load-file "~/.emacs.d/magit.el") ;; emacs的 git 工具
  ;; (load-file "~/.emacs.d/yasnippet.el")
  ;; (load-file "~/.emacs.d/elfeed.el")

  (load-file "~/.emacs.d/gc-tail.el")
  #+end_src

** basic_config
#+begin_src emacs-lisp :tangle ~/.emacs.d/basic_config.el
  (setq inhibit-startup-message 1) ;; 禁止Emacs显示启动画面
  (fset 'display-startup-echo-area-message 'ignore) ;; 禁止Echo Area显示For information about GNU Emacs and the GNU system,type C-h C-a

  ;; (add-to-list 'default-frame-alist '(foreground-color . "#FFFFFF")) ;; 我最初的主题设定
  ;; (add-to-list 'default-frame-alist '(background-color . "#000000"))

  (global-linum-mode t)
  (column-number-mode t)

  (xterm-mouse-mode t)

  (fset 'yes-or-no-p 'y-or-n-p)

  (recentf-mode t)

  (save-place-mode t)

  (setq-default indent-tabs-mode t)
  (setq-default tab-width 4)
  (setq c-default-style "linux")
  (setq c-basic-offset 4)

  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))

  (defun reload-emacs-config ()
	(interactive)
	(load-file "~/.emacs.d/init.el"))
  (global-set-key (kbd "C-c C-SPC") 'reload-emacs-config)

  (global-set-key (kbd "C-M-z") 'indent-region)

  (global-set-key (kbd "M-j") nil)

  (global-set-key (kbd "<F10>") nil)

  (setq kill-ring-max 200)
  ;;设置粘贴缓冲条目数量.用一个很大的kill ring(最多的记录个数). 这样防止我不小心删掉重要的东西

  (setq enable-recursive-minibuffers t)
  ;;可以递归的使用 minibuffer

  (setq scroll-margin 3 scroll-conservatively 10000)
  ;;防止页面滚动时跳动， scroll-margin 3 可以在靠近屏幕边沿3行时就开始滚动，可以很好的看到上下文。

  ;; (setq-default auto-fill-function 'do-auto-fill)
  ;; ;; Autofill in all modes;;
  ;; (setq default-fill-column 120)
  ;; ;;把 fill-column 设为 60. 这样的文字更好读

  ;; (setq default-major-mode 'text-mode)
  ;; (add-hook 'text-mode-hook 'turn-on-auto-fill)
  ;;设置缺省主模式是text，,并进入auto-fill次模式.而不是基本模式fundamental-mode

  (mouse-avoidance-mode 'animate)
  ;;光标靠近鼠标指针时，让鼠标指针自动让开，别挡住视线。

  ;; (setq frame-title-format "emacs@%b")
  (setq frame-title-format "%b")
  ;;在标题栏显示buffer的名字，而不是 emacs@wangyin.com 这样没用的提示。

  (setq uniquify-buffer-name-style 'forward) ;;好像没起作用
  ;; 当有两个文件名相同的缓冲时，使用前缀的目录名做 buffer 名字，不用原来的foobar 形式

  (add-hook 'comint-output-filter-functions
			'comint-watch-for-password-prompt)
  ;;当你在shell、telnet、w3m等模式下时，必然碰到过要输入密码的情况,此时加密显出你的密码

  ;; (setq version-control t);;启用版本控制，即可以备份多次
  ;; (setq kept-old-versions 2);;备份最原始的版本两次，及第一次编辑前的文档，和第二次编辑前的文档
  ;; (setq kept-new-versions 1);;备份最新的版本1次，理解同上
  ;; (setq delete-old-versions t);;删掉不属于以上3中版本的版本
  ;; (setq backup-directory-alist '(("." . "~/backups")));;设置备份文件的路径
  ;; (setq backup-by-copying t);;备份设置方法，直接拷贝
  ;; Emacs 中，改变文件时，默认都会产生备份文件(以 ~ 结尾的文件)。可以完全去掉; (并不可取)，也可以制定备份的方式。这里采用的是，把所有的文件备份都放在一个固定的地方("~/backups")。对于每个备份文件，保留最原始的两个版本和最新的1个版本。并且备份的时候，备份文件是复本，而不是原件。

  ;; (setq make-backup-files nil)
  ;; ;; 设定不产生备份文件

  ;; ;;(setq auto-save-mode nil)
  ;; ;;自动保存模式

  ;; (setq-default make-backup-files nil)
  ;; ;; 不生成临时文件

  ;; ;;允许emacs和外部其他程序的粘贴
  ;; (setq x-select-enable-clipboard t)

  (setq mouse-yank-at-point t)
  ;;使用鼠标中键可以粘贴
  ;;不要在鼠标点击的那个地方插入剪贴板内容。我不喜欢那样，经常把我的文档搞的一团糟。我觉得先用光标定位，然后鼠标中键点击要好的多。不管你的光标在文档的那个位置，或是在 minibuffer，鼠标中键一点击，X selection 的内容就被插入到那个位置。


#+end_src

** use-package.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/use-package.el
  ;; 初始化包管理器
  (require 'package)
  (package-initialize)

  ;; 设置软件包源
  (setq package-archives
		'(
		  ("GNU ELPA"     . "https://elpa.gnu.org/packages/")
		  ("MELPA Stable" . "https://stable.melpa.org/packages/")
		  ("melpa" . "https://melpa.org/packages/")
		  )
		)
  ;; 安装 use-package（如果还未安装）
  (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

  ;; 加载并自动安装软件包
  (eval-when-compile
	(require 'use-package))
  (require 'bind-key)
  ;; 设置 use-package 的一些常用选项
  (setq use-package-always-ensure t   ; 自动安装软件包
		use-package-verbose t        ; 在 *Messages* 缓冲区中详细显示加载信息
		use-package-compute-statistics t) ; 收集并显示 use-package 使用的时间信息

  ;; Your use-package package configurations start here...

#+end_src

** gcmh
#+begin_src emacs-lisp :tangle ~/.emacs.d/gcmh.el
  (use-package gcmh
	:config
	;; (setq gcmh-verbose t) ; 启用详细输出，可选
	;; (setq gcmh-high-cons-threshold 16777216) ; 设置高阈值为 16MB，可根据需要调整
	(setq gcmh-high-cons-threshold 100000000) ;; 发现spacemacs的配置设置的是这样的值，虽然用的是其他函数，但是功能想必是差不多的
	(setq gcmh-idle-delay 5) ; 设置延迟垃圾回收的空闲时间为 5 秒

	;; 其他配置选项...

	(gcmh-mode 1)) ; 启用 gcmh 插件
#+end_src

** g-config
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-config.el
  (defun g-config ()
	(interactive)
	(insert "** \n#+begin_src emacs-lisp :tangle ~/.emacs.d/\n\n#+end_src")
	)
#+end_src
** g-org-insert-note-header
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-org-insert-note-header.el
  (defun g-org-insert-note-header () ;;; 定义一个名为g-org-insert-note-header ()的函数
	(interactive) ;;; 函数的一个特殊声明，表示函数可以被用户调用
	(insert "#+options: ^:nil\n#+title: \n#+options: \\n:t\n#+author: yenao\n")) ;;; insert函数用于在当前 光标位置插入指定的文本内容，当你调用这个函数时，它会在当前光标位置插入文本#+options: ^:nil、#+title:  和#+author: yenao
#+end_src
** g-org-code-block
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-org-code-block.el
  (defun g-org-code-block ()
	(interactive)
	(insert "** \n#+begin_src emacs-lisp :tangle no\n\n#+end_src")
	)
#+end_src

** report
#+begin_src emacs-lisp :tangle ~/.emacs.d/report.el
  (defun add-code-block ()
	"在当前位置添加一个代码块，并以时间作为块名进行命名"
	(interactive)
	(let* ((time (format-time-string "%Y-%m-%d"))  ; 获取当前时间
		   (clean-time (replace-regexp-in-string "[-:]" "" time))  ; 去除时间中的破折号和冒号
		   (block-name (concat clean-time))  ; 构建代码块名
		   (code-block (format
						"** %s
  ,#+BEGIN_SRC emacs-lisp :tangle %s.txt
  %s: name\n1、
  ,#+END_SRC"
						block-name clean-time block-name)))
	  (insert code-block)))  ; 在当前位置插入代码块

  ;; 设置快捷键 C-c b 绑定到 add-code-block 函数
  (global-set-key (kbd "C-c SPC r") 'add-code-block)
#+end_src

** company.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/company.el
  (use-package company
	:ensure t
	:defer 2
	:init (global-company-mode t)
	:config
	(setq company-minimum-prefix-length 1)
	(setq company-tooltip-align-annotations t)
	(setq company-idle-delay 0.0)
	(setq company-show-numbers t)
	(setq company-selection-wrap-around t)
	(setq company-transformers '(company-sort-by-occurrence)))
#+end_src

** window-numbering
#+begin_src emacs-lisp :tangle ~/.emacs.d/window-numbering.el
  (use-package window-numbering
	:ensure t
	;; :defer 2
	:init (window-numbering-mode t)
	)
#+end_src

** ace-window
#+begin_src emacs-lisp :tangle ~/.emacs.d/ace-window.el
  (use-package ace-window
	:ensure t
	:defer 2
	:bind (("C-x o" . 'ace-window)))
#+end_src

** GTD
#+begin_src emacs-lisp :tangle ~/.emacs.d/GTD.el
  ;; 尝试配置GTD
  (unless (file-exists-p "~/.emacs.d/OneDrive")
	(make-directory "~/.emacs.d/OneDrive")
	);; 检测OneDrive目录是否存在，如果不存在就创建这个目录
  (unless (file-exists-p "~/.emacs.d/OneDrive/org")
	(make-directory "~/.emacs.d/OneDrive/org")
	);; 检测org目录是否存在，如果不存在就创建这个目录
  (let ((filename "~/.emacs.d/my-agenda.el")) ;; 如果my-agenda.el文件不存在，就创建这个文件，如果需要往 该文件内写入内容，将该段该中insert的注释取消即可
	(unless (file-exists-p filename)
	  (with-temp-file filename
		;; (insert "这是文件内容") ;; 写入文件内容
		)))
  (let ((filename "~/.emacs.d/OneDrive/org/todo.org")) ;; 如果todo.org文件不存在，就创建这个文件，如果需要往该文件内写入内容，将该段该中insert的注释取消即可
	(unless (file-exists-p filename)
	  (with-temp-file filename
		;; (insert "这是文件内容") ;; 写入文件内容
		)))

  (load-file "~/.emacs.d/my-agenda.el") ;; 加载my-agenda.el配置文件
  (setq org-agenda-files '("~/.emacs.d/OneDrive/org")) ;; 指定data存放目录
  (setq org-default-notes-file "~/.emacs.d/OneDrive/org/todo.org") ;; 配置好data目录后，再配置具体要将信息写于哪个文件，可以配置多个文件，出于简化，这里将所有的agenda todo写入~/Onedrive/org/todo.org文件下
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (define-key global-map "\C-cr" 'remember)

  (setq org-todo-keywords '((sequence "TODO(t!)" "NEXT(n)" "WAITTING(w)" "SOMEDAY(s)" "|" "DONE(d@/!)" "ABORT(a@/!)")))
  (setq org-tag-alist '(("@office" . ?w) ("@home" . ?h) ("traffic" . ?t) ("computer" . ?c) ("nocomputer" . ?n) ("either" . ?e) ("immediately" . ?i) ("wait" . ?w) ("action" . ?a)))
#+end_src

** easy-hugo
#+begin_src emacs-lisp :tangle ~/.emacs.d/easy-hugo.el
  (use-package easy-hugo
	:ensure t
	:defer 2
	)
#+end_src

** ox-hugo
#+begin_src emacs-lisp :tangle ~/.emacs.d/ox-hugo.el
  (use-package ox-hugo
	:ensure t
	:defer 2
	:custom
	(unless (file-exists-p "~/hugo/")
	  (make-directory "~/hugo/")
	  )
	(unless (file-exists-p "~/hugo/project/")
	  (make-directory "~/hugo/project/")
	  )
	(unless (file-exists-p "~/hugo/static/")
	  (make-directory "~/hugo/static/")
	  )
	:config
	(setq org-hugo-base-dir "~/hugo/project/")
	)
#+end_src

** cnfogts
参考链接:
[[https://github.com/tumashu/cnfonts][cnfonts，A simple Chinese fonts config tool]]
[[https://blog.csdn.net/fareast_mzh/article/details/94720439][emacs 调整字体大小]]
#+begin_src emacs-lisp :tangle ~/.emacs.d/cnfonts.el
  (use-package cnfonts
	:ensure t
	:defer 2
	:init (cnfonts-mode t)
	:custom
	(unless (file-exists-p "~/.emacs.d/roam")
	  (make-directory "~/.emacs.d/roam")
	  )
	:config
	(define-key cnfonts-mode-map (kbd "C--") #'cnfonts-decrease-fontsize)
	(define-key cnfonts-mode-map (kbd "C-=") #'cnfonts-increase-fontsize)
	)
#+end_src

** org-noter
#+begin_src emacs-lisp :tangle ~/.emacs.d/org-noter.el
  (use-package org-noter
	:ensure t
	:defer 2
	)
#+end_src

** Msys2
#+begin_src emacs-lisp :tangle ~/.emacs.d/Msys2.el
  (use-package Msys2
	:ensure t
	)
#+end_src

** pdf-tools
#+begin_src emacs-lisp :tangle ~/.emacs.d/pdf-tools.el
  (use-package pdf-tools
	:ensure t
	:init
	(pdf-loader-install))
  (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))

  (defun pdf-view-kill-rmn-ring-save ()
	"Copy the region to the `kill-ring' after remove all newline characters."
	(interactive)
	(pdf-view-assert-active-region)
	(let* ((txt (replace-regexp-in-string "\n" " "
										  (car (pdf-view-active-region-text)))))
	  (pdf-view-deactivate-region)
	  (kill-new txt)))

  ;; (use-package pdf-view-mode
  ;;   :bind
  ;;   ("C-c C-w" . pdf-view-kill-rmn-ring-save))
#+end_src

** org-roam
#+begin_src emacs-lisp :tangle ~/.emacs.d/org-roam.el
  (use-package org-roam
	:ensure t
	:after org
	:init
	(setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
	:config
	(org-roam-setup)
	:custom
	(org-roam-directory (concat org-directory "roam/")) ; 设置 org-roam 目录
	:bind
	(("C-c n f" . org-roam-node-find)
	 (:map org-mode-map
		   (("C-c n i" . org-roam-node-insert)
			("C-c n o" . org-id-get-create)
			("C-c n t" . org-roam-tag-add)
			("C-c n a" . org-roam-alias-add)
			("C-c n l" . org-roam-buffer-toggle)))))
#+end_src

** org-roam-ui
#+begin_src emacs-lisp :tangle ~/.emacs.d/org-roam-ui.el
  (use-package org-roam-ui
	:ensure t
	:after org-roam
	:config
	(setq org-roam-ui-port 9000
		  org-roam-ui-sync-theme t
		  org-roam-ui-follow t
		  org-roam-ui-update-on-save t
		  org-roam-ui-open-on-start nil))
#+end_src

** deft
#+begin_src emacs-lisp :tangle ~/.emacs.d/deft.el
  (use-package deft
	:ensure t
	:commands (deft)
	:custom
	(unless (file-exists-p "~/.emacs.d/roam")
	  (make-directory "~/.emacs.d/roam")
	  )
	(deft-directory "~/.emacs.d/roam")
	(deft-recursive t))
#+end_src


** keycast
#+begin_src emacs-lisp :tangle ~/.emacs.d/keycast.el
  (use-package keycast
	:ensure t
	:defer t
	)
#+end_src

** magit
#+begin_src emacs-lisp :tangle ~/.emacs.d/magit.el
  (use-package magit
	:ensure t
	:defer t
	)
#+end_src

** doom-themes
#+begin_src emacs-lisp :tangle ~/.emacs.d/doom-themes.el
  (use-package doom-themes
	:ensure t
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold nil    ; if nil, bold is universally disabled
		  doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-monokai-octagon t)
	(doom-themes-treemacs-config))
#+end_src

** dracula-theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/dracula-theme.el
  (use-package dracula-theme
	:ensure t
	:config
	(load-theme 'dracula t)
	)
#+end_src

** spacemacs-theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/spacemacs-theme.el
  (use-package spacemacs-theme
	:ensure t
	:config
	(load-theme 'spacemacs-dark t)  ; Dark theme
	;; 或者
	;; (load-theme 'spacemacs-light t) ; Light theme
	)
#+end_src

** markdown
#+begin_src emacs-lisp :tangle ~/.emacs.d/markdown.el
  (use-package markdown-mode
	:ensure t
	:defer t
	:config
	;;markdown设置
	(autoload 'markdown-mode "markdown-mode"
	  "Major mode for editing Markdown files" t)
	(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
	(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
	(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
	)
#+end_src

** ox-pandoc
#+begin_src emacs-lisp :tangle ~/.emacs.d/ox-pandoc.el
  (use-package ox-pandoc
	:ensure t
	)
#+end_src

** newsticker
#+begin_src emacs-lisp :tangle ~/.emacs.d/newsticker.el
  (use-package newsticker
	:ensure nil
	:init
	(setq newsticker-retrieval-interval 0
		  newsticker-ticker-interval 0)
	:config
	(global-set-key (kbd "C-c n") 'newsticker-show-news)
	(setq newsticker-show-full-article-content t)
	(defun my/leader-keys ()
	  "on" '(my/newsticker-treeview-in-new-tab :wk "newsticker"))
	(defun my/newsticker-treeview-in-new-tab ()
	  (interactive)
	  (let (succ)
		(unwind-protect
			(progn
			  (tab-bar-new-tab)
			  (call-interactively #'newsticker-treeview)
			  (tab-bar-rename-tab "newsticker")
			  (setq succ t))
		  (unless succ
			(tab-bar-close-tab)))))

	(defun my/newsticker-treeview-quit-and-close-tab ()
	  (interactive)
	  (newsticker-treeview-quit)
	  (newsticker-stop)
	  (tab-close))

	(defun general-define-key ()
	  :keymaps 'newsticker-treeview-mode-map
	  :states 'normal
	  "q" 'my/newsticker-treeview-quit-and-close-tab)

	:custom
	(newsticker-url-list '(
						   ;; ("title" "URL" other options)
						   ("少数派" "https://sspai.com/feed")
						   ("Luckydesigner" "https://www.luckydesigner.space/feed")
						   ("极客部落" "https://g22z.com/feed")
						   ("国光" "https://www.sqlsec.com/atom.xml")
						   ("面向信仰的编程" "https://draveness.me/feed.xml")
						   ))
	(newsticker-retrieval-method 'extern)
	(newsticker-wget-name "curl")
	(newsticker-wget-arguments '("--disable" "--silent" "--location" "--proxy" "socks5://127.0.0.1:7890"))
	(newsticker-url-list-defaults nil)    ;remove default list (i.e. emacswiki)
	(newsticker-automatically-mark-items-as-old nil))
#+end_src

** amx
#+begin_src emacs-lisp :tangle ~/.emacs.d/amx.el
  (use-package amx
	:ensure t
	:defer 2
	:init (amx-mode))
#+end_src

** mwim
#+begin_src emacs-lisp :tangle ~/.emacs.d/mwim.el
  (use-package mwim
	:ensure t
	:defer 2
	:bind
	("C-a" . mwim-beginning-of-code-or-line)
	("C-e" . mwim-end-of-code-or-line))
#+end_src

** undo-tree
#+begin_src emacs-lisp :tangle ~/.emacs.d/undo-tree.el
  (use-package undo-tree
	:ensure t
	:defer 2
	:init (global-undo-tree-mode)
	:custom
	(undo-tree-auto-save-history nil))
#+end_src

** good-scroll
#+begin_src emacs-lisp :tangle ~/.emacs.d/good-scroll.el
  (use-package good-scroll
	:ensure t
	:defer 2
	;; :if window-system          ; 在图形化界面时才使用这个插件
	:init (good-scroll-mode))
#+end_src

** which-key
#+begin_src emacs-lisp :tangle ~/.emacs.d/which-key.el
  (use-package which-key
	:ensure t
	:defer 1
	:init (which-key-mode))
#+end_src

** avy
#+begin_src emacs-lisp :tangle ~/.emacs.d/avy.el
  (use-package avy
	:ensure t
	:defer 2
	:bind
	(("M-j" . avy-goto-char-timer)))
#+end_src

** highlight-symbol
#+begin_src emacs-lisp :tangle ~/.emacs.d/highlight-symbol.el
  (use-package highlight-symbol
	:ensure t
	:defer 2
	:init (highlight-symbol-mode)
	:bind ("<f10>" . highlight-symbol)) ;; 按下 F10 键就可高亮当前符号
#+end_src

** rainbow-delimiters
#+begin_src emacs-lisp :tangle ~/.emacs.d/rainbow-delimiters.el
  (use-package rainbow-delimiters
	:ensure t
	:defer 2
	:hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** treemacs
#+begin_src emacs-lisp :tangle ~/.emacs.d/treemacs.el
  (use-package treemacs
	:ensure t
	:defer 2
	:config
	(treemacs-tag-follow-mode)
	:bind
	(:map global-map
		  ("M-0"       . treemacs-select-window)
		  ("C-x t 1"   . treemacs-delete-other-windows)
		  ("C-x t t"   . treemacs)
		  ("C-x t B"   . treemacs-bookmark)
		  ;; ("C-x t C-t" . treemacs-find-file)
		  ("C-x t M-t" . treemacs-find-tag))
	(:map treemacs-mode-map
		  ("/" . treemacs-advanced-helpful-hydra)))

  (use-package treemacs-projectile
	:ensure t
	:after (treemacs projectile))

  (use-package lsp-treemacs
	:ensure t
	:after (treemacs lsp))
#+end_src

** google-this
#+begin_src emacs-lisp :tangle ~/.emacs.d/google-this.el
  (use-package google-this
	:ensure t
	:defer t
	:init
	(google-this-mode)) 
#+end_src

** dashboard
#+begin_src emacs-lisp :tangle ~/.emacs.d/dashboard.el
  (use-package dashboard
	:ensure t
	:config
	(setq dashboard-banner-logo-title "Welcome to Emacs!") ;; 个性签名，随读者喜好设置
	;; (setq dashboard-projects-backend 'projectile) ;; 读者可以暂时注释掉这一行，等安装了 projectile 后再使用
	(setq dashboard-startup-banner 'official) ;; 也可以自定义图片
	(setq dashboard-items '((recents  . 5)   ;; 显示多少个最近文件
							(bookmarks . 5)  ;; 显示多少个最近书签
							(projects . 10))) ;; 显示多少个最近项目
	(dashboard-setup-startup-hook))
#+end_src

** tiny
#+begin_src emacs-lisp :tangle ~/.emacs.d/tiny.el
  (use-package tiny
	:ensure t
	:defer t
	;; 可选绑定快捷键，笔者个人感觉不绑定快捷键也无妨
	:bind
	("C-;" . tiny-expand))
#+end_src

** eww
#+begin_src emacs-lisp :tangle ~/.emacs.d/eww.el
  (use-package eww
	:ensure nil
	:defer t
	:config
	(with-eval-after-load 'eww  
	  (custom-set-variables  
	   '(eww-search-prefix "https://bing.com/search?q="))  
	  )
	(prefer-coding-system 'utf-8)
	(setq-default buffer-file-coding-system 'utf-8)
	(setq eww-use-external-webkit t)
	(setq-default eww-ems-internal-uses-webkit t)
	;; 如果想尝试用外部浏览器浏览网页的话可以考虑折腾下面的命令
	;; (setq browse-url-generic-program "浏览器命令")
	;; (setq browse-url-browser-function 'browse-url-generic)
	;; (setq browse-url-generic-program "firefox")
	;; (setq browse-url-browser-function 'browse-url-generic)
	)
#+end_src

** elfeed
#+begin_src emacs-lisp :tangle ~/.emacs.d/elfeed.el
  (use-package elfeed
	:ensure t
	:bind ("C-x w" . elfeed)
	:config
	(setq elfeed-db-directory "~/.emacs.d/.elfeed") ;; 设置 Elfeed 数据库目录
	(setq elfeed-feeds
		  '(
			"https://sspai.com/feed"
			"https://www.luckydesigner.space/feed"
			)
		  ))
#+end_src

** yasnippet
#+begin_src emacs-lisp :tangle ~/.emacs.d/yasnippet.el
  (use-package yasnippet
	:ensure t
	:config
	(yas-global-mode 1)
	(add-to-list 'load-path
				 "~/.emacs.d/plugins/yasnippet")
	;; (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
	;; ;; 或者使用以下代码指定 yasnippet 的安装文件夹
	;; ;; (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
	)
#+end_src

** el-get
#+begin_src emacs-lisp :tangle ~/.emacs.d/el-get.el
  (use-package el-get
	:ensure t
	)
#+end_src

** esup
#+begin_src emacs-lisp :tangle ~/.emacs.d/esup.el
  ;; 使用use-package安装esup
  (use-package esup
	:ensure t
	:commands (esup)
	)
#+end_src

** test_emacs_speed
#+begin_src emacs-lisp :tangle ~/.emacs.d/test_emacs_speed.el
  ;; Use a hook so the message doesn't get clobbered by other messages.
  (add-hook 'emacs-startup-hook
			(lambda ()
			  (message "Emacs ready in %s with %d garbage collections."
					   (format "%.2f seconds"
							   (float-time
								(time-subtract after-init-time before-init-time)))
					   gcs-done)))
#+end_src

** gc-head
#+begin_src emacs-lisp :tangle ~/.emacs.d/gc-head.el
  ;; Make startup faster by reducing the frequency of garbage
  ;; collection.  The default is 0.8MB.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))
  ;; Portion of heap used for allocation.  Defaults to 0.1.
  (setq gc-cons-percentage 0.6)
#+end_src

** gc-tail
#+begin_src emacs-lisp :tangle ~/.emacs.d/gc-tail.el
  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

** 显示时间设置
** display_time
#+begin_src emacs-lisp :tangle ~/.emacs.d/display_time.el
  (display-time-mode 1);;启用时间显示设置，在minibuffer上面的那个杠上
  (setq display-time-24hr-format t);;时间使用24小时制
  (setq display-time-day-and-date t);;时间显示包括日期和具体时间
  ;; (setq display-time-use-mail-icon t);;时间栏旁边启用邮件设置
  ;; (setq display-time-interval 10);;时间的变化频率，单位多少来着？
#+end_src
