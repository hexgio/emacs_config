#+options: ^:nil
#+title: config
#+options: \n:t
#+author: yenao

* config
** init.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; 在~/.emacs.d/目录下编辑org文件，将代码块导出后再在org文件中通过load-file加载或者重启emacs，同时检查家目录下如果出现.emacs就将其删除
  ;; 如果不想加载哪个配置文件，可以将其注释掉
  ;; 以下几个插件有些问题，暂时没有配置好
  (load-file "~/.emacs.d/basic_config.el") ;; 我的基本的配置
  (load-file "~/.emacs.d/use-package.el") ;; 用于安装或者配置插件
  (load-file "~/.emacs.d/gcmh.el") ;; 用于emacs内存垃圾回收
  (load-file "~/.emacs.d/mwim.el") ;; 优化 C-a 与 C-e
  (load-file "~/.emacs.d/amx.el") ;; 短暂记录命令历史
  (load-file "~/.emacs.d/which-key.el") ;; 快捷键提示
  ;; (load-file "~/.emacs.d/undo-tree.el") ;; 优化 undo 和 redo
  ;; (load-file "~/.emacs.d/doom-themes.el") ;; 主题 
  ;; (load-file "~/.emacs.d/dracula-theme.el") ;; 主题
  (load-file "~/.emacs.d/spacemacs-theme.el") ;; 主题
  (load-file "~/.emacs.d/avy.el") ;; 强大插件，可以脱离鼠标使用
  (load-file "~/.emacs.d/highlight-symbol.el") ;; <F8> 打开符号高亮
  (load-file "~/.emacs.d/rainbow-delimiters.el") ;; 标记多级代码块
  (load-file "~/.emacs.d/g-config.el") ;; 插件插件配置代码块
  (load-file "~/.emacs.d/g-org-insert-note-header.el") ;; 插件org文件头
  (load-file "~/.emacs.d/g-org-code-block.el") ;; 插入一般的代码块
  (load-file "~/.emacs.d/report.el") ;; 插件特定代码块模板用
  (load-file "~/.emacs.d/company.el") ;; 补全文本用
  ;; (load-file "~/.emacs.d/good-scroll.el") ;; 优化页面滚动，但是我没感觉出效果
  (load-file "~/.emacs.d/window-numbering.el") ;; 切换窗口用
  (load-file "~/.emacs.d/ace-window.el") ;; 切换窗口用
  (load-file "~/.emacs.d/treemacs.el") ;; 
  (load-file "~/.emacs.d/GTD.el") ;; 用于GTD，还可以再完善，由于目前用的不多，没有过多完善
  (load-file "~/.emacs.d/keycast.el") ;; 用于显示在 emacs中操作的按键，可以插件开启这个插件的模式，自动启动会于minibuffer的行列显示冲突
  (load-file "~/.emacs.d/cnfonts.el") ;; 用于缩放字体
  (load-file "~/.emacs.d/ox-hugo.el") ;; 在org文件中执行 C-c C-e 导出文件时可以用于导出 markdown 文本
  (load-file "~/.emacs.d/markdown.el") ;; 支持 markdown 模式编写文本
  ;; (load-file "~/.emacs.d/ox-pandoc.el")
  ;; (load-file "~/.emacs.d/org-noter.el")
  ;; (load-file "~/.emacs.d/org-roam.el")
  ;; (load-file "~/.emacs.d/org-roam-ui.el")
  ;; (load-file "~/.emacs.d/deft.el") 
  ;; (load-file "~/.emacs.d/Msys2.el")
  ;; (load-file "~/.emacs.d/pdf-tools.el")
  ;; (load-file "~/.emacs.d/magit.el") ;; emacs的 git 工具
  (load-file"~/.emacs.d/newsticker.el") ;; 用于rss阅读
  (load-file"~/.emacs.d/google-this.el") ;; 在minibuffer输入要搜索内容然后跳转到浏览器进行搜索
  #+end_src

** basic_config.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/basic_config.el
  (setq inhibit-startup-message 1) ;; 禁止Emacs显示启动画面
  (fset 'display-startup-echo-area-message 'ignore) ;; 禁止Echo Area显示For information about GNU Emacs and the GNU system,type C-h C-a
  ;; (add-to-list 'default-frame-alist '(foreground-color . "#FFFFFF")) ;; 我最初的主题设定
  ;; (add-to-list 'default-frame-alist '(background-color . "#000000"))
  (global-linum-mode t)
  (column-number-mode t)
  (xterm-mouse-mode t)
  (recentf-mode t)
  (save-place-mode t)
  (setq-default indent-tabs-mode t)
  (setq-default tab-width 4)
  (setq c-default-style "linux")
  (setq c-basic-offset 4)
  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))  
  (defun reload-emacs-config ()
	(interactive)
	(load-file "~/.emacs.d/init.el"))
  (global-set-key (kbd "C-c C-SPC") 'reload-emacs-config)
  (global-set-key (kbd "C-M-z") 'indent-region)
  (global-set-key (kbd "M-j") nil)
#+end_src

** use-package.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/use-package.el
  ;; 初始化包管理器
  (require 'package)
  (package-initialize)

  ;; 设置软件包源
  (setq package-archives
		'(
		  ("GNU ELPA"     . "https://elpa.gnu.org/packages/")
		  ("MELPA Stable" . "https://stable.melpa.org/packages/")
		  ("melpa" . "https://melpa.org/packages/")
		  )
		)
  ;; 安装 use-package（如果还未安装）
  (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

  ;; 加载并自动安装软件包
  (eval-when-compile
	(require 'use-package))
  (require 'bind-key)
  ;; 设置 use-package 的一些常用选项
  (setq use-package-always-ensure t   ; 自动安装软件包
		use-package-verbose t        ; 在 *Messages* 缓冲区中详细显示加载信息
		use-package-compute-statistics t) ; 收集并显示 use-package 使用的时间信息

  ;; Your use-package package configurations start here...

#+end_src

** gcmh
#+begin_src emacs-lisp :tangle ~/.emacs.d/gcmh.el
  (use-package gcmh
	:config
	;; (setq gcmh-verbose t) ; 启用详细输出，可选
	(setq gcmh-high-cons-threshold 16777216) ; 设置高阈值为 16MB，可根据需要调整
	;; (setq gcmh-high-cons-threshold 100000000) ;; 发现spacemacs的配置设置的是这样的值，虽然用的是其他函数，但是功能想必是差不多的
	(setq gcmh-idle-delay 5) ; 设置延迟垃圾回收的空闲时间为 5 秒

	;; 其他配置选项...

	(gcmh-mode 1)) ; 启用 gcmh 插件
#+end_src

** g-config
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-config.el
  (defun g-config ()
	(interactive)
	(insert "** \n#+begin_src emacs-lisp :tangle ~/.emacs.d/\n\n#+end_src")
	)
#+end_src
** g-org-insert-note-header
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-org-insert-note-header.el
  (defun g-org-insert-note-header () ;;; 定义一个名为g-org-insert-note-header ()的函数
	(interactive) ;;; 函数的一个特殊声明，表示函数可以被用户调用
	(insert "#+options: ^:nil\n#+title: \n#+options: \\n:t\n#+author: yenao\n")) ;;; insert函数用于在当前 光标位置插入指定的文本内容，当你调用这个函数时，它会在当前光标位置插入文本#+options: ^:nil、#+title:  和#+author: yenao
#+end_src
** g-org-code-block
#+begin_src emacs-lisp :tangle ~/.emacs.d/g-org-code-block.el
  (defun g-org-code-block ()
	(interactive)
	(insert "** \n#+begin_src emacs-lisp :tangle no\n\n#+end_src")
	)
#+end_src
** report
#+begin_src emacs-lisp :tangle ~/.emacs.d/report.el
  (defun add-code-block ()
	"在当前位置添加一个代码块，并以时间作为块名进行命名"
	(interactive)
	(let* ((time (format-time-string "%Y-%m-%d"))  ; 获取当前时间
		   (clean-time (replace-regexp-in-string "[-:]" "" time))  ; 去除时间中的破折号和冒号
		   (block-name (concat clean-time))  ; 构建代码块名
		   (code-block (format
						"** %s
  ,#+BEGIN_SRC emacs-lisp :tangle %s.txt
  %s: name\n1. 
  ,#+END_SRC"
						block-name clean-time block-name)))
	  (insert code-block)))  ; 在当前位置插入代码块

  ;; 设置快捷键 C-c b 绑定到 add-code-block 函数
  (global-set-key (kbd "C-c SPC r") 'add-code-block)
#+end_src

** company.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/company.el
  (use-package company
	:ensure t
	:defer t
	:init (global-company-mode t)
	:config
	(setq company-minimum-prefix-length 1)
	(setq company-tooltip-align-annotations t)
	(setq company-idle-delay 0.0)
	(setq company-show-numbers t)
	(setq company-selection-wrap-around t)
	(setq company-transformers '(company-sort-by-occurrence)))
#+end_src

** window-numbering
#+begin_src emacs-lisp :tangle ~/.emacs.d/window-numbering.el
  (use-package window-numbering
	:ensure t
	:defer t
	:init (window-numbering-mode t)
	)
#+end_src

** ace-window
#+begin_src emacs-lisp :tangle ~/.emacs.d/ace-window.el
  (use-package ace-window
	:ensure t
	:bind (("C-x o" . 'ace-window)))
#+end_src

** GTD
#+begin_src emacs-lisp :tangle ~/.emacs.d/GTD.el
  ;; 尝试配置GTD
  (unless (file-exists-p "~/.emacs.d/OneDrive")
	(make-directory "~/.emacs.d/OneDrive")
	);; 检测OneDrive目录是否存在，如果不存在就创建这个目录
  (unless (file-exists-p "~/.emacs.d/OneDrive/org")
	(make-directory "~/.emacs.d/OneDrive/org")
	);; 检测org目录是否存在，如果不存在就创建这个目录
  (let ((filename "~/.emacs.d/my-agenda.el")) ;; 如果my-agenda.el文件不存在，就创建这个文件，如果需要往 该文件内写入内容，将该段该中insert的注释取消即可
	(unless (file-exists-p filename)
	  (with-temp-file filename
		;; (insert "这是文件内容") ;; 写入文件内容
		)))
  (let ((filename "~/.emacs.d/OneDrive/org/todo.org")) ;; 如果todo.org文件不存在，就创建这个文件，如果需要往该文件内写入内容，将该段该中insert的注释取消即可
	(unless (file-exists-p filename)
	  (with-temp-file filename
		;; (insert "这是文件内容") ;; 写入文件内容
		)))

  (load-file "~/.emacs.d/my-agenda.el") ;; 加载my-agenda.el配置文件
  (setq org-agenda-files '("~/.emacs.d/OneDrive/org")) ;; 指定data存放目录
  (setq org-default-notes-file "~/.emacs.d/OneDrive/org/todo.org") ;; 配置好data目录后，再配置具体要将信息写于哪个文件，可以配置多个文件，出于简化，这里将所有的agenda todo写入~/Onedrive/org/todo.org文件下
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (define-key global-map "\C-cr" 'remember)

  (setq org-todo-keywords '((sequence "TODO(t!)" "NEXT(n)" "WAITTING(w)" "SOMEDAY(s)" "|" "DONE(d@/!)" "ABORT(a@/!)")))
  (setq org-tag-alist '(("@office" . ?w) ("@home" . ?h) ("traffic" . ?t) ("computer" . ?c) ("nocomputer" . ?n) ("either" . ?e) ("immediately" . ?i) ("wait" . ?w) ("action" . ?a)))
#+end_src

** ox-hugo
#+begin_src emacs-lisp :tangle ~/.emacs.d/ox-hugo.el
  (use-package ox-hugo
	:ensure t
	)
#+end_src

** cnfogts
参考链接:
[[https://github.com/tumashu/cnfonts][cnfonts，A simple Chinese fonts config tool]]
[[https://blog.csdn.net/fareast_mzh/article/details/94720439][emacs 调整字体大小]]
#+begin_src emacs-lisp :tangle ~/.emacs.d/cnfonts.el
  (use-package cnfonts
	:ensure t
	:defer t
	:init (cnfonts-mode t)
	:custom
	(unless (file-exists-p "~/.emacs.d/roam")
	  (make-directory "~/.emacs.d/roam")
	  )
	:config
	(define-key cnfonts-mode-map (kbd "C--") #'cnfonts-decrease-fontsize)
	(define-key cnfonts-mode-map (kbd "C-=") #'cnfonts-increase-fontsize)
	)
#+end_src

** org-noter
#+begin_src emacs-lisp :tangle ~/.emacs.d/org-noter.el
  (use-package org-noter
	:ensure t
	:defer t
	)
#+end_src

** Msys2
#+begin_src emacs-lisp :tangle ~/.emacs.d/Msys2.el
  (use-package Msys2
	:ensure t
	)
#+end_src

** pdf-tools
#+begin_src emacs-lisp :tangle ~/.emacs.d/pdf-tools.el
  (use-package pdf-tools
	:ensure t
	:init
	(pdf-loader-install))
  (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))

  (defun pdf-view-kill-rmn-ring-save ()
	"Copy the region to the `kill-ring' after remove all newline characters."
	(interactive)
	(pdf-view-assert-active-region)
	(let* ((txt (replace-regexp-in-string "\n" " "
										  (car (pdf-view-active-region-text)))))
	  (pdf-view-deactivate-region)
	  (kill-new txt)))

  ;; (use-package pdf-view-mode
  ;;   :bind
  ;;   ("C-c C-w" . pdf-view-kill-rmn-ring-save))
#+end_src

** org-roam
#+begin_src emacs-lisp :tangle ~/.emacs.d/org-roam.el
  (use-package org-roam
	:ensure t
	:after org
	:init
	(setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
	:config
	(org-roam-setup)
	:custom
	(org-roam-directory (concat org-directory "roam/")) ; 设置 org-roam 目录
	:bind
	(("C-c n f" . org-roam-node-find)
	 (:map org-mode-map
		   (("C-c n i" . org-roam-node-insert)
			("C-c n o" . org-id-get-create)
			("C-c n t" . org-roam-tag-add)
			("C-c n a" . org-roam-alias-add)
			("C-c n l" . org-roam-buffer-toggle)))))
#+end_src

** org-roam-ui
#+begin_src emacs-lisp :tangle ~/.emacs.d/org-roam-ui.el
  (use-package org-roam-ui
	:ensure t
	:after org-roam
	:config
	(setq org-roam-ui-port 9000
		  org-roam-ui-sync-theme t
		  org-roam-ui-follow t
		  org-roam-ui-update-on-save t
		  org-roam-ui-open-on-start nil))
#+end_src

** deft
#+begin_src emacs-lisp :tangle ~/.emacs.d/deft.el
  (use-package deft
	:ensure t
	:commands (deft)
	:custom
	(unless (file-exists-p "~/.emacs.d/roam")
	  (make-directory "~/.emacs.d/roam")
	  )
	(deft-directory "~/.emacs.d/roam")
	(deft-recursive t))
#+end_src


** keycast
#+begin_src emacs-lisp :tangle ~/.emacs.d/keycast.el
  (use-package keycast
	:ensure t
	:defer t
	)
#+end_src

** magit
#+begin_src emacs-lisp :tangle ~/.emacs.d/magit.el
  (use-package magit
	:ensure t
	:defer t
	)
#+end_src

** doom-themes
#+begin_src emacs-lisp :tangle ~/.emacs.d/doom-themes.el
  (use-package doom-themes
	:ensure t
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold nil    ; if nil, bold is universally disabled
		  doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-monokai-octagon t)
	(doom-themes-treemacs-config))
#+end_src

** dracula-theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/dracula-theme.el
  (use-package dracula-theme
	:ensure t
	:config
	(load-theme 'dracula t)
	)
#+end_src

** spacemacs-theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/spacemacs-theme.el
  (use-package spacemacs-theme
	:ensure t
	:config
	(load-theme 'spacemacs-dark t)  ; Dark theme
	;; 或者
	;; (load-theme 'spacemacs-light t) ; Light theme
	)
#+end_src

** markdown
#+begin_src emacs-lisp :tangle ~/.emacs.d/markdown.el
  (use-package markdown-mode
	:ensure t
	:defer t
	:config
	;;markdown设置
	(autoload 'markdown-mode "markdown-mode"
	  "Major mode for editing Markdown files" t)
	(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
	(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
	(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
	)
#+end_src

** ox-pandoc
#+begin_src emacs-lisp :tangle ~/.emacs.d/ox-pandoc.el
  (use-package ox-pandoc
	:ensure t
	)
#+end_src

** newsticker
#+begin_src emacs-lisp :tangle ~/.emacs.d/newsticker.el
  (use-package newsticker
	:ensure nil
	:defer t
	:init
	(setq newsticker-retrieval-interval 0
		  newsticker-ticker-interval 0)
	:custom
	(my/leader-keys
	 "on" '(my/newsticker-treeview-in-new-tab :wk "newsticker"))
	:config
	(defun my/newsticker-treeview-in-new-tab ()
	  (interactive)
	  (let (succ)
		(unwind-protect
			(progn
			  (tab-bar-new-tab)
			  (call-interactively #'newsticker-treeview)
			  (tab-bar-rename-tab "newsticker")
			  (setq succ t))
		  (unless succ
			(tab-bar-close-tab)))))

	(defun my/newsticker-treeview-quit-and-close-tab ()
	  (interactive)
	  (newsticker-treeview-quit)
	  (newsticker-stop)
	  (tab-close))

	(general-define-key
	 :keymaps 'newsticker-treeview-mode-map
	 :states 'normal
	 "q" 'my/newsticker-treeview-quit-and-close-tab)

	:custom
	(newsticker-url-list '(
						   ;; ("title" "URL" other options)
						   ("emacs redux" "https://emacsredux.com/atom.xml" nil nil nil)
						   ("batsov" "https://batsov.com/atom.xml" nil nil nil)
						   ("meta redux" "https://metaredux.com/feed.xml" nil nil nil)
						   ("Ruanyifeng" "https://www.ruanyifeng.com/blog/atom.xml" nil nil nil)
						   ("Sachachua emacs news" "https://sachachua.com/blog/category/emacs-news/feed" nil nil nil)
						   ("Planet Emacs Life" "https://planet.emacslife.com/atom.xml" nil nil nil)
						   ("Karthinks" "https://karthinks.com/index.xml" nil nil nil)
						   ("ruzkuku" "https://ruzkuku.com/all.atom" nil nil nil)
						   ("lazycat" "https://manateelazycat.github.io/feed.xml" nil nil nil)
						   ("jlelse" "https://jlelse.blog/.rss")
						   ("honmaple" "https://honmaple.me/atom.xml")
						   ("ianthehenry" "https://ianthehenry.com/feed.xml")
						   ("manueluberti" "https://www.manueluberti.eu/feed.xml")
						   ("kevq" "https://kevq.uk/feed.xml")
						   ("hacker news" "https://hnrss.org/frontpage")
						   ("lobsters" "https://lobste.rs/rss")
						   ("jameslittle" "https://jameslittle.me/feed.xml")
						   ("ag91" "https://ag91.github.io/rss.xml")
						   ))
	(newsticker-retrieval-method 'extern)
	(newsticker-wget-name "curl")
	(newsticker-wget-arguments '("--disable" "--silent" "--location" "--proxy" "socks5://127.0.0.1:7890"))
	(newsticker-url-list-defaults nil)    ;remove default list (i.e. emacswiki)
	(newsticker-automatically-mark-items-as-old nil))
#+end_src

** amx
#+begin_src emacs-lisp :tangle ~/.emacs.d/amx.el
(use-package amx
  :ensure t
  :init (amx-mode))
#+end_src

** mwim
#+begin_src emacs-lisp :tangle ~/.emacs.d/mwim.el
(use-package mwim
  :ensure t
  :bind
  ("C-a" . mwim-beginning-of-code-or-line)
  ("C-e" . mwim-end-of-code-or-line))
#+end_src

** undo-tree
#+begin_src emacs-lisp :tangle ~/.emacs.d/undo-tree.el
(use-package undo-tree
  :ensure t
  :init (global-undo-tree-mode)
  :custom
  (undo-tree-auto-save-history nil))
#+end_src

** good-scroll
#+begin_src emacs-lisp :tangle ~/.emacs.d/good-scroll.el
  (use-package good-scroll
	:ensure t
	;; :if window-system          ; 在图形化界面时才使用这个插件
	:init (good-scroll-mode))
#+end_src

** which-key
#+begin_src emacs-lisp :tangle ~/.emacs.d/which-key.el
(use-package which-key
  :ensure t
  :init (which-key-mode))
#+end_src

** avy
#+begin_src emacs-lisp :tangle ~/.emacs.d/avy.el
(use-package avy
  :ensure t
  :bind
  (("M-j" . avy-goto-char-timer)))
#+end_src

** highlight-symbol
#+begin_src emacs-lisp :tangle ~/.emacs.d/highlight-symbol.el
(use-package highlight-symbol
  :ensure t
  :init (highlight-symbol-mode)
  :bind ("<f8>" . highlight-symbol)) ;; 按下 F3 键就可高亮当前符号
#+end_src

** rainbow-delimiters
#+begin_src emacs-lisp :tangle ~/.emacs.d/rainbow-delimiters.el
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** treemacs
#+begin_src emacs-lisp :tangle ~/.emacs.d/treemacs.el
(use-package treemacs
  :ensure t
  :defer t
  :config
  (treemacs-tag-follow-mode)
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ;; ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag))
  (:map treemacs-mode-map
	("/" . treemacs-advanced-helpful-hydra)))

(use-package treemacs-projectile
  :ensure t
  :after (treemacs projectile))

(use-package lsp-treemacs
  :ensure t
  :after (treemacs lsp))
#+end_src

** google-this
#+begin_src emacs-lisp :tangle ~/.emacs.d/google-this.el
(use-package google-this
  :ensure t
  :init
  (google-this-mode)) 
#+end_src
